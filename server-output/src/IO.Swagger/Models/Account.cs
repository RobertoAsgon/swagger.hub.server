/*
 * myLIMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Account : IEquatable<Account>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Identification
        /// </summary>

        [DataMember(Name="Identification")]
        public string Identification { get; set; }

        /// <summary>
        /// Gets or Sets RegistryNumber
        /// </summary>

        [DataMember(Name="RegistryNumber")]
        public string RegistryNumber { get; set; }

        /// <summary>
        /// Gets or Sets EquivalencyId
        /// </summary>

        [DataMember(Name="EquivalencyId")]
        public int? EquivalencyId { get; set; }

        /// <summary>
        /// Gets or Sets AddressTypeId
        /// </summary>

        [DataMember(Name="AddressTypeId")]
        public int? AddressTypeId { get; set; }

        /// <summary>
        /// Gets or Sets AddressType
        /// </summary>

        [DataMember(Name="AddressType")]
        public string AddressType { get; set; }

        /// <summary>
        /// Gets or Sets Address1
        /// </summary>

        [DataMember(Name="Address1")]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or Sets Address2
        /// </summary>

        [DataMember(Name="Address2")]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>

        [DataMember(Name="District")]
        public string District { get; set; }

        /// <summary>
        /// Gets or Sets CityId
        /// </summary>

        [DataMember(Name="CityId")]
        public int? CityId { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>

        [DataMember(Name="City")]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets StateId
        /// </summary>

        [DataMember(Name="StateId")]
        public int? StateId { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="State")]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>

        [DataMember(Name="CountryId")]
        public int? CountryId { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>

        [DataMember(Name="Country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>

        [DataMember(Name="ZipCode")]
        public string ZipCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  RegistryNumber: ").Append(RegistryNumber).Append("\n");
            sb.Append("  EquivalencyId: ").Append(EquivalencyId).Append("\n");
            sb.Append("  AddressTypeId: ").Append(AddressTypeId).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  CityId: ").Append(CityId).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateId: ").Append(StateId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Account)obj);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="other">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.Equals(other.Identification)
                ) && 
                (
                    RegistryNumber == other.RegistryNumber ||
                    RegistryNumber != null &&
                    RegistryNumber.Equals(other.RegistryNumber)
                ) && 
                (
                    EquivalencyId == other.EquivalencyId ||
                    EquivalencyId != null &&
                    EquivalencyId.Equals(other.EquivalencyId)
                ) && 
                (
                    AddressTypeId == other.AddressTypeId ||
                    AddressTypeId != null &&
                    AddressTypeId.Equals(other.AddressTypeId)
                ) && 
                (
                    AddressType == other.AddressType ||
                    AddressType != null &&
                    AddressType.Equals(other.AddressType)
                ) && 
                (
                    Address1 == other.Address1 ||
                    Address1 != null &&
                    Address1.Equals(other.Address1)
                ) && 
                (
                    Address2 == other.Address2 ||
                    Address2 != null &&
                    Address2.Equals(other.Address2)
                ) && 
                (
                    District == other.District ||
                    District != null &&
                    District.Equals(other.District)
                ) && 
                (
                    CityId == other.CityId ||
                    CityId != null &&
                    CityId.Equals(other.CityId)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    StateId == other.StateId ||
                    StateId != null &&
                    StateId.Equals(other.StateId)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    CountryId == other.CountryId ||
                    CountryId != null &&
                    CountryId.Equals(other.CountryId)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    ZipCode == other.ZipCode ||
                    ZipCode != null &&
                    ZipCode.Equals(other.ZipCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (RegistryNumber != null)
                    hashCode = hashCode * 59 + RegistryNumber.GetHashCode();
                    if (EquivalencyId != null)
                    hashCode = hashCode * 59 + EquivalencyId.GetHashCode();
                    if (AddressTypeId != null)
                    hashCode = hashCode * 59 + AddressTypeId.GetHashCode();
                    if (AddressType != null)
                    hashCode = hashCode * 59 + AddressType.GetHashCode();
                    if (Address1 != null)
                    hashCode = hashCode * 59 + Address1.GetHashCode();
                    if (Address2 != null)
                    hashCode = hashCode * 59 + Address2.GetHashCode();
                    if (District != null)
                    hashCode = hashCode * 59 + District.GetHashCode();
                    if (CityId != null)
                    hashCode = hashCode * 59 + CityId.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (StateId != null)
                    hashCode = hashCode * 59 + StateId.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (CountryId != null)
                    hashCode = hashCode * 59 + CountryId.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (ZipCode != null)
                    hashCode = hashCode * 59 + ZipCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Account left, Account right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Account left, Account right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
