/*
 * myLIMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkPriceItem : IEquatable<WorkPriceItem>
    { 
        /// <summary>
        /// Gets or Sets PriceItemId
        /// </summary>

        [DataMember(Name="PriceItemId")]
        public int? PriceItemId { get; set; }

        /// <summary>
        /// Gets or Sets Identification
        /// </summary>

        [DataMember(Name="Identification")]
        public string Identification { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>

        [DataMember(Name="Price")]
        public float? Price { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>

        [DataMember(Name="Amount")]
        public float? Amount { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>

        [DataMember(Name="TotalPrice")]
        public float? TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>

        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>

        [DataMember(Name="Active")]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Bill
        /// </summary>

        [DataMember(Name="Bill")]
        public bool? Bill { get; set; }

        /// <summary>
        /// Gets or Sets Billed
        /// </summary>

        [DataMember(Name="Billed")]
        public bool? Billed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkPriceItem {\n");
            sb.Append("  PriceItemId: ").Append(PriceItemId).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Bill: ").Append(Bill).Append("\n");
            sb.Append("  Billed: ").Append(Billed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkPriceItem)obj);
        }

        /// <summary>
        /// Returns true if WorkPriceItem instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkPriceItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkPriceItem other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PriceItemId == other.PriceItemId ||
                    PriceItemId != null &&
                    PriceItemId.Equals(other.PriceItemId)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.Equals(other.Identification)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    TotalPrice == other.TotalPrice ||
                    TotalPrice != null &&
                    TotalPrice.Equals(other.TotalPrice)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Active == other.Active ||
                    Active != null &&
                    Active.Equals(other.Active)
                ) && 
                (
                    Bill == other.Bill ||
                    Bill != null &&
                    Bill.Equals(other.Bill)
                ) && 
                (
                    Billed == other.Billed ||
                    Billed != null &&
                    Billed.Equals(other.Billed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PriceItemId != null)
                    hashCode = hashCode * 59 + PriceItemId.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (TotalPrice != null)
                    hashCode = hashCode * 59 + TotalPrice.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Active != null)
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (Bill != null)
                    hashCode = hashCode * 59 + Bill.GetHashCode();
                    if (Billed != null)
                    hashCode = hashCode * 59 + Billed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkPriceItem left, WorkPriceItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkPriceItem left, WorkPriceItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
