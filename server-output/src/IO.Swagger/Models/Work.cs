/*
 * myLIMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Work : IEquatable<Work>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="Id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Identification
        /// </summary>

        [DataMember(Name="Identification")]
        public string Identification { get; set; }

        /// <summary>
        /// Gets or Sets ControlNumber
        /// </summary>

        [DataMember(Name="ControlNumber")]
        public string ControlNumber { get; set; }

        /// <summary>
        /// Gets or Sets RelatedAccount
        /// </summary>

        [DataMember(Name="RelatedAccount")]
        public RelatedAccount RelatedAccount { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCenter
        /// </summary>

        [DataMember(Name="ServiceCenter")]
        public ServiceCenter ServiceCenter { get; set; }

        /// <summary>
        /// Gets or Sets WorkConclusion
        /// </summary>

        [DataMember(Name="WorkConclusion")]
        public WorkConclusion WorkConclusion { get; set; }

        /// <summary>
        /// Gets or Sets WorkClass
        /// </summary>

        [DataMember(Name="WorkClass")]
        public WorkClass WorkClass { get; set; }

        /// <summary>
        /// Gets or Sets WorkSubclass
        /// </summary>

        [DataMember(Name="WorkSubclass")]
        public WorkSubclass WorkSubclass { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>

        [DataMember(Name="TotalPrice")]
        public float? TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>

        [DataMember(Name="Account")]
        public Account Account { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>

        [DataMember(Name="Currency")]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or Sets CommercialProposalId
        /// </summary>

        [DataMember(Name="CommercialProposalId")]
        public int? CommercialProposalId { get; set; }

        /// <summary>
        /// Gets or Sets CommercialProposalControlNumber
        /// </summary>

        [DataMember(Name="CommercialProposalControlNumber")]
        public string CommercialProposalControlNumber { get; set; }

        /// <summary>
        /// Gets or Sets CommercialProposalIdentification
        /// </summary>

        [DataMember(Name="CommercialProposalIdentification")]
        public string CommercialProposalIdentification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Work {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  ControlNumber: ").Append(ControlNumber).Append("\n");
            sb.Append("  RelatedAccount: ").Append(RelatedAccount).Append("\n");
            sb.Append("  ServiceCenter: ").Append(ServiceCenter).Append("\n");
            sb.Append("  WorkConclusion: ").Append(WorkConclusion).Append("\n");
            sb.Append("  WorkClass: ").Append(WorkClass).Append("\n");
            sb.Append("  WorkSubclass: ").Append(WorkSubclass).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  CommercialProposalId: ").Append(CommercialProposalId).Append("\n");
            sb.Append("  CommercialProposalControlNumber: ").Append(CommercialProposalControlNumber).Append("\n");
            sb.Append("  CommercialProposalIdentification: ").Append(CommercialProposalIdentification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Work)obj);
        }

        /// <summary>
        /// Returns true if Work instances are equal
        /// </summary>
        /// <param name="other">Instance of Work to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Work other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.Equals(other.Identification)
                ) && 
                (
                    ControlNumber == other.ControlNumber ||
                    ControlNumber != null &&
                    ControlNumber.Equals(other.ControlNumber)
                ) && 
                (
                    RelatedAccount == other.RelatedAccount ||
                    RelatedAccount != null &&
                    RelatedAccount.Equals(other.RelatedAccount)
                ) && 
                (
                    ServiceCenter == other.ServiceCenter ||
                    ServiceCenter != null &&
                    ServiceCenter.Equals(other.ServiceCenter)
                ) && 
                (
                    WorkConclusion == other.WorkConclusion ||
                    WorkConclusion != null &&
                    WorkConclusion.Equals(other.WorkConclusion)
                ) && 
                (
                    WorkClass == other.WorkClass ||
                    WorkClass != null &&
                    WorkClass.Equals(other.WorkClass)
                ) && 
                (
                    WorkSubclass == other.WorkSubclass ||
                    WorkSubclass != null &&
                    WorkSubclass.Equals(other.WorkSubclass)
                ) && 
                (
                    TotalPrice == other.TotalPrice ||
                    TotalPrice != null &&
                    TotalPrice.Equals(other.TotalPrice)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    CommercialProposalId == other.CommercialProposalId ||
                    CommercialProposalId != null &&
                    CommercialProposalId.Equals(other.CommercialProposalId)
                ) && 
                (
                    CommercialProposalControlNumber == other.CommercialProposalControlNumber ||
                    CommercialProposalControlNumber != null &&
                    CommercialProposalControlNumber.Equals(other.CommercialProposalControlNumber)
                ) && 
                (
                    CommercialProposalIdentification == other.CommercialProposalIdentification ||
                    CommercialProposalIdentification != null &&
                    CommercialProposalIdentification.Equals(other.CommercialProposalIdentification)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (ControlNumber != null)
                    hashCode = hashCode * 59 + ControlNumber.GetHashCode();
                    if (RelatedAccount != null)
                    hashCode = hashCode * 59 + RelatedAccount.GetHashCode();
                    if (ServiceCenter != null)
                    hashCode = hashCode * 59 + ServiceCenter.GetHashCode();
                    if (WorkConclusion != null)
                    hashCode = hashCode * 59 + WorkConclusion.GetHashCode();
                    if (WorkClass != null)
                    hashCode = hashCode * 59 + WorkClass.GetHashCode();
                    if (WorkSubclass != null)
                    hashCode = hashCode * 59 + WorkSubclass.GetHashCode();
                    if (TotalPrice != null)
                    hashCode = hashCode * 59 + TotalPrice.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (CommercialProposalId != null)
                    hashCode = hashCode * 59 + CommercialProposalId.GetHashCode();
                    if (CommercialProposalControlNumber != null)
                    hashCode = hashCode * 59 + CommercialProposalControlNumber.GetHashCode();
                    if (CommercialProposalIdentification != null)
                    hashCode = hashCode * 59 + CommercialProposalIdentification.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Work left, Work right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Work left, Work right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
