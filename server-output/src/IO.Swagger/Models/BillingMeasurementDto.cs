/*
 * myLIMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BillingMeasurementDto : IEquatable<BillingMeasurementDto>
    { 
        /// <summary>
        /// Gets or Sets Work
        /// </summary>

        [DataMember(Name="Work")]
        public Work Work { get; set; }

        /// <summary>
        /// Gets or Sets WorkInfos
        /// </summary>

        [DataMember(Name="WorkInfos")]
        public List<WorkInfo> WorkInfos { get; private set; }

        /// <summary>
        /// Gets or Sets WorkPriceItems
        /// </summary>

        [DataMember(Name="WorkPriceItems")]
        public List<WorkPriceItem> WorkPriceItems { get; private set; }

        /// <summary>
        /// Gets or Sets WorkWorks
        /// </summary>

        [DataMember(Name="WorkWorks")]
        public List<WorkWork> WorkWorks { get; private set; }

        /// <summary>
        /// Gets or Sets WorkSamples
        /// </summary>

        [DataMember(Name="WorkSamples")]
        public List<Sample> WorkSamples { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingMeasurementDto {\n");
            sb.Append("  Work: ").Append(Work).Append("\n");
            sb.Append("  WorkInfos: ").Append(WorkInfos).Append("\n");
            sb.Append("  WorkPriceItems: ").Append(WorkPriceItems).Append("\n");
            sb.Append("  WorkWorks: ").Append(WorkWorks).Append("\n");
            sb.Append("  WorkSamples: ").Append(WorkSamples).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BillingMeasurementDto)obj);
        }

        /// <summary>
        /// Returns true if BillingMeasurementDto instances are equal
        /// </summary>
        /// <param name="other">Instance of BillingMeasurementDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingMeasurementDto other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Work == other.Work ||
                    Work != null &&
                    Work.Equals(other.Work)
                ) && 
                (
                    WorkInfos == other.WorkInfos ||
                    WorkInfos != null &&
                    WorkInfos.SequenceEqual(other.WorkInfos)
                ) && 
                (
                    WorkPriceItems == other.WorkPriceItems ||
                    WorkPriceItems != null &&
                    WorkPriceItems.SequenceEqual(other.WorkPriceItems)
                ) && 
                (
                    WorkWorks == other.WorkWorks ||
                    WorkWorks != null &&
                    WorkWorks.SequenceEqual(other.WorkWorks)
                ) && 
                (
                    WorkSamples == other.WorkSamples ||
                    WorkSamples != null &&
                    WorkSamples.SequenceEqual(other.WorkSamples)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Work != null)
                    hashCode = hashCode * 59 + Work.GetHashCode();
                    if (WorkInfos != null)
                    hashCode = hashCode * 59 + WorkInfos.GetHashCode();
                    if (WorkPriceItems != null)
                    hashCode = hashCode * 59 + WorkPriceItems.GetHashCode();
                    if (WorkWorks != null)
                    hashCode = hashCode * 59 + WorkWorks.GetHashCode();
                    if (WorkSamples != null)
                    hashCode = hashCode * 59 + WorkSamples.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BillingMeasurementDto left, BillingMeasurementDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BillingMeasurementDto left, BillingMeasurementDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
